{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/seachbar/searchbar.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBar","placeholder","handlechange","type","onChange","App","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAK,SAAAC,GAAK,OACtB,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,WAAYC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCAPC,EAAS,SAAAR,GAErB,OADAS,QAAQC,IAAIV,GACJ,qBAAKC,UAAU,YAAf,SACND,EAAMW,SAASC,KAAI,SAAAD,GAAQ,OAAG,cAAC,EAAD,CAAwBP,QAASO,GAAtBA,EAASN,UCNxCQ,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACtB,uBACAd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CIG,E,kDAzCd,aAAc,IAAD,8BACZ,gBAiBDH,aAAa,SAACI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAM,CACVb,SAAS,GACTU,YAAY,IARD,E,qDAab,WAAoB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAQrE,WACC,MAA6BC,KAAKN,MAA3Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YAEVU,EAAiBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC7CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEjD,OAAQ,sBAAKhC,UAAU,MAAf,UAEP,kDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCNI,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3bd1c5f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.component.css';\r\n\r\nexport const Card=props=>(\r\n\t<div className=\"card-container\">\r\n\t\t<img alt=\"monsters\"  src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n\t\t<h2>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\r\n\t</div>\r\n\r\n\r\n\t)","import  React from 'react';\r\n\r\nimport './card-list.component.css';\r\n\r\nimport {Card } from '../card/card.component'\r\n\r\n\r\nexport const CardList=props=>{\r\n\tconsole.log(props)\r\n\treturn (<div className=\"card-list\">\r\n\t\t{props.monsters.map(monsters=>(<Card key={monsters.id} monster={monsters}/>))\r\n     }\r\n     </div>)\r\n\r\n}\r\n","import React from 'react';\r\n\r\nimport './searchbar.style.css';\r\n\r\nexport const SearchBar=({placeholder,handlechange})=>(\r\n\t<input \r\n\tclassName='search'\r\n\ttype='search' \r\n\tplaceholder={placeholder} \r\n\tonChange={handlechange}/>\r\n\r\n\t)","\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.components'\n\nimport React,{Component} from 'react';\n\nimport {SearchBar} from './components/seachbar/searchbar.components'\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\n\t\t// this.state={\n\t\t// \tstring:'hello uno'\n\t\t// }\n\t\tthis.state={\n\t\t\tmonsters:[]\t,\n\t\t\tsearchfield:\"\"};\n\n\t\t\t//this.handlechange=this.handlechange.bind(this);\n\t};\n//life cycle method\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=>response.json()).then(users=>this.setState({monsters:users}));\n\t}\n//class method\n\thandlechange=(e)=>{\n\t\tthis.setState({searchfield:e.target.value});\n\t}\n\n\n  render(){\n  \tconst {monsters,searchfield}=this.state;\n\n  \tconst filteredMonsters=monsters.filter(monster=>\n  \t\tmonster.name.toLowerCase().includes(searchfield.toLowerCase()))\n\n  \treturn (<div className=\"App\">\n\n  \t\t<h1>Monsters Rolodex</h1>\n\t  \t<SearchBar placeholder='search monsters' handlechange={this.handlechange}/>\n\t  \t<CardList monsters={filteredMonsters}/>\n  \t   \n    </div>)\n  }\n    \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}